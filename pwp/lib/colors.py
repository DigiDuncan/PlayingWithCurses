import re

from pwp.lib.utils import AttrDict

names = [
    'BLACK',
    'RED',
    'GREEN',
    'YELLOW',
    'BLUE',
    'MAGENTA',
    'CYAN',
    'LIGHT_GRAY',
    'DARK_GRAY',
    'LIGHT_RED',
    'LIGHT_GREEN',
    'LIGHT_YELLOW',
    'LIGHT_BLUE',
    'LIGHT_MAGENTA',
    'LIGHT_CYAN',
    'WHITE',
    'GREY_0',
    'NAVY_BLUE',
    'DARK_BLUE',
    'BLUE_3A',
    'BLUE_3B',
    'BLUE_1',
    'DARK_GREEN',
    'DEEP_SKY_BLUE_4A',
    'DEEP_SKY_BLUE_4B',
    'DEEP_SKY_BLUE_4C',
    'DODGER_BLUE_3',
    'DODGER_BLUE_2',
    'GREEN_4',
    'SPRING_GREEN_4',
    'TURQUOISE_4',
    'DEEP_SKY_BLUE_3A',
    'DEEP_SKY_BLUE_3B',
    'DODGER_BLUE_1',
    'GREEN_3A',
    'SPRING_GREEN_3A',
    'DARK_CYAN',
    'LIGHT_SEA_GREEN',
    'DEEP_SKY_BLUE_2',
    'DEEP_SKY_BLUE_1',
    'GREEN_3B',
    'SPRING_GREEN_3B',
    'SPRING_GREEN_2A',
    'CYAN_3',
    'DARK_TURQUOISE',
    'TURQUOISE_2',
    'GREEN_1',
    'SPRING_GREEN_2B',
    'SPRING_GREEN_1',
    'MEDIUM_SPRING_GREEN',
    'CYAN_2',
    'CYAN_1',
    'DARK_RED_1',
    'DEEP_PINK_4A',
    'PURPLE_4A',
    'PURPLE_4B',
    'PURPLE_3',
    'BLUE_VIOLET',
    'ORANGE_4A',
    'GREY_37',
    'MEDIUM_PURPLE_4',
    'SLATE_BLUE_3A',
    'SLATE_BLUE_3B',
    'ROYAL_BLUE_1',
    'CHARTREUSE_4',
    'DARK_SEA_GREEN_4A',
    'PALE_TURQUOISE_4',
    'STEEL_BLUE',
    'STEEL_BLUE_3',
    'CORNFLOWER_BLUE',
    'CHARTREUSE_3A',
    'DARK_SEA_GREEN_4B',
    'CADET_BLUE_2',
    'CADET_BLUE_1',
    'SKY_BLUE_3',
    'STEEL_BLUE_1A',
    'CHARTREUSE_3B',
    'PALE_GREEN_3A',
    'SEA_GREEN_3',
    'AQUAMARINE_3',
    'MEDIUM_TURQUOISE',
    'STEEL_BLUE_1B',
    'CHARTREUSE_2A',
    'SEA_GREEN_2',
    'SEA_GREEN_1A',
    'SEA_GREEN_1B',
    'AQUAMARINE_1A',
    'DARK_SLATE_GRAY_2',
    'DARK_RED_2',
    'DEEP_PINK_4B',
    'DARK_MAGENTA_1',
    'DARK_MAGENTA_2',
    'DARK_VIOLET_1A',
    'PURPLE_1A',
    'ORANGE_4B',
    'LIGHT_PINK_4',
    'PLUM_4',
    'MEDIUM_PURPLE_3A',
    'MEDIUM_PURPLE_3B',
    'SLATE_BLUE_1',
    'YELLOW_4A',
    'WHEAT_4',
    'GREY_53',
    'LIGHT_SLATE_GREY',
    'MEDIUM_PURPLE',
    'LIGHT_SLATE_BLUE',
    'YELLOW_4B',
    'DARK_OLIVE_GREEN_3A',
    'DARK_GREEN_SEA',
    'LIGHT_SKY_BLUE_3A',
    'LIGHT_SKY_BLUE_3B',
    'SKY_BLUE_2',
    'CHARTREUSE_2B',
    'DARK_OLIVE_GREEN_3B',
    'PALE_GREEN_3B',
    'DARK_SEA_GREEN_3A',
    'DARK_SLATE_GRAY_3',
    'SKY_BLUE_1',
    'CHARTREUSE_1',
    'LIGHT_GREEN_2',
    'LIGHT_GREEN_3',
    'PALE_GREEN_1A',
    'AQUAMARINE_1B',
    'DARK_SLATE_GRAY_1',
    'RED_3A',
    'DEEP_PINK_4C',
    'MEDIUM_VIOLET_RED',
    'MAGENTA_3A',
    'DARK_VIOLET_1B',
    'PURPLE_1B',
    'DARK_ORANGE_3A',
    'INDIAN_RED_1A',
    'HOT_PINK_3A',
    'MEDIUM_ORCHID_3',
    'MEDIUM_ORCHID',
    'MEDIUM_PURPLE_2A',
    'DARK_GOLDENROD',
    'LIGHT_SALMON_3A',
    'ROSY_BROWN',
    'GREY_63',
    'MEDIUM_PURPLE_2B',
    'MEDIUM_PURPLE_1',
    'GOLD_3A',
    'DARK_KHAKI',
    'NAVAJO_WHITE_3',
    'GREY_69',
    'LIGHT_STEEL_BLUE_3',
    'LIGHT_STEEL_BLUE',
    'YELLOW_3A',
    'DARK_OLIVE_GREEN_3',
    'DARK_SEA_GREEN_3B',
    'DARK_SEA_GREEN_2',
    'LIGHT_CYAN_3',
    'LIGHT_SKY_BLUE_1',
    'GREEN_YELLOW',
    'DARK_OLIVE_GREEN_2',
    'PALE_GREEN_1B',
    'DARK_SEA_GREEN_5B',
    'DARK_SEA_GREEN_5A',
    'PALE_TURQUOISE_1',
    'RED_3B',
    'DEEP_PINK_3A',
    'DEEP_PINK_3B',
    'MAGENTA_3B',
    'MAGENTA_3C',
    'MAGENTA_2A',
    'DARK_ORANGE_3B',
    'INDIAN_RED_1B',
    'HOT_PINK_3B',
    'HOT_PINK_2',
    'ORCHID',
    'MEDIUM_ORCHID_1A',
    'ORANGE_3',
    'LIGHT_SALMON_3B',
    'LIGHT_PINK_3',
    'PINK_3',
    'PLUM_3',
    'VIOLET',
    'GOLD_3B',
    'LIGHT_GOLDENROD_3',
    'TAN',
    'MISTY_ROSE_3',
    'THISTLE_3',
    'PLUM_2',
    'YELLOW_3B',
    'KHAKI_3',
    'LIGHT_GOLDENROD_2A',
    'LIGHT_YELLOW_3',
    'GREY_84',
    'LIGHT_STEEL_BLUE_1',
    'YELLOW_2',
    'DARK_OLIVE_GREEN_1A',
    'DARK_OLIVE_GREEN_1B',
    'DARK_SEA_GREEN_1',
    'HONEYDEW_2',
    'LIGHT_CYAN_1',
    'RED_1',
    'DEEP_PINK_2',
    'DEEP_PINK_1A',
    'DEEP_PINK_1B',
    'MAGENTA_2B',
    'MAGENTA_1',
    'ORANGE_RED_1',
    'INDIAN_RED_1C',
    'INDIAN_RED_1D',
    'HOT_PINK_1A',
    'HOT_PINK_1B',
    'MEDIUM_ORCHID_1B',
    'DARK_ORANGE',
    'SALMON_1',
    'LIGHT_CORAL',
    'PALE_VIOLET_RED_1',
    'ORCHID_2',
    'ORCHID_1',
    'ORANGE_1',
    'SANDY_BROWN',
    'LIGHT_SALMON_1',
    'LIGHT_PINK_1',
    'PINK_1',
    'PLUM_1',
    'GOLD_1',
    'LIGHT_GOLDENROD_2B',
    'LIGHT_GOLDENROD_2C',
    'NAVAJO_WHITE_1',
    'MISTY_ROSE1',
    'THISTLE_1',
    'YELLOW_1',
    'LIGHT_GOLDENROD_1',
    'KHAKI_1',
    'WHEAT_1',
    'CORNSILK_1',
    'GREY_100',
    'GREY_3',
    'GREY_7',
    'GREY_11',
    'GREY_15',
    'GREY_19',
    'GREY_23',
    'GREY_27',
    'GREY_30',
    'GREY_35',
    'GREY_39',
    'GREY_42',
    'GREY_46',
    'GREY_50',
    'GREY_54',
    'GREY_58',
    'GREY_62',
    'GREY_66',
    'GREY_70',
    'GREY_74',
    'GREY_78',
    'GREY_82',
    'GREY_85',
    'GREY_89',
    'GREY_93'
]

values = [
    0x000000,
    0x800000,
    0x008000,
    0x808000,
    0x000080,
    0x800080,
    0x008080,
    0xc0c0c0,
    0x808080,
    0xff0000,
    0x00ff00,
    0xffff00,
    0x0000ff,
    0xff00ff,
    0x00ffff,
    0xffffff,
    0x000000,
    0x00005f,
    0x000087,
    0x0000af,
    0x0000d7,
    0x0000ff,
    0x005f00,
    0x005f5f,
    0x005f87,
    0x005faf,
    0x005fd7,
    0x005fff,
    0x008700,
    0x00875f,
    0x008787,
    0x0087af,
    0x0087d7,
    0x0087ff,
    0x00af00,
    0x00af5f,
    0x00af87,
    0x00afaf,
    0x00afd7,
    0x00afff,
    0x00d700,
    0x00d75f,
    0x00d787,
    0x00d7af,
    0x00d7d7,
    0x00d7ff,
    0x00ff00,
    0x00ff5f,
    0x00ff87,
    0x00ffaf,
    0x00ffd7,
    0x00ffff,
    0x5f0000,
    0x5f005f,
    0x5f0087,
    0x5f00af,
    0x5f00d7,
    0x5f00ff,
    0x5f5f00,
    0x5f5f5f,
    0x5f5f87,
    0x5f5faf,
    0x5f5fd7,
    0x5f5fff,
    0x5f8700,
    0x5f875f,
    0x5f8787,
    0x5f87af,
    0x5f87d7,
    0x5f87ff,
    0x5faf00,
    0x5faf5f,
    0x5faf87,
    0x5fafaf,
    0x5fafd7,
    0x5fafff,
    0x5fd700,
    0x5fd75f,
    0x5fd787,
    0x5fd7af,
    0x5fd7d7,
    0x5fd7ff,
    0x5fff00,
    0x5fff5f,
    0x5fff87,
    0x5fffaf,
    0x5fffd7,
    0x5fffff,
    0x870000,
    0x87005f,
    0x870087,
    0x8700af,
    0x8700d7,
    0x8700ff,
    0x875f00,
    0x875f5f,
    0x875f87,
    0x875faf,
    0x875fd7,
    0x875fff,
    0x878700,
    0x87875f,
    0x878787,
    0x8787af,
    0x8787d7,
    0x8787ff,
    0x87af00,
    0x87af5f,
    0x87af87,
    0x87afaf,
    0x87afd7,
    0x87afff,
    0x87d700,
    0x87d75f,
    0x87d787,
    0x87d7af,
    0x87d7d7,
    0x87d7ff,
    0x87ff00,
    0x87ff5f,
    0x87ff87,
    0x87ffaf,
    0x87ffd7,
    0x87ffff,
    0xaf0000,
    0xaf005f,
    0xaf0087,
    0xaf00af,
    0xaf00d7,
    0xaf00ff,
    0xaf5f00,
    0xaf5f5f,
    0xaf5f87,
    0xaf5faf,
    0xaf5fd7,
    0xaf5fff,
    0xaf8700,
    0xaf875f,
    0xaf8787,
    0xaf87af,
    0xaf87d7,
    0xaf87ff,
    0xafaf00,
    0xafaf5f,
    0xafaf87,
    0xafafaf,
    0xafafd7,
    0xafafff,
    0xafd700,
    0xafd75f,
    0xafd787,
    0xafd7af,
    0xafd7d7,
    0xafd7ff,
    0xafff00,
    0xafff5f,
    0xafff87,
    0xafffaf,
    0xafffd7,
    0xafffff,
    0xd70000,
    0xd7005f,
    0xd70087,
    0xd700af,
    0xd700d7,
    0xd700ff,
    0xd75f00,
    0xd75f5f,
    0xd75f87,
    0xd75faf,
    0xd75fd7,
    0xd75fff,
    0xd78700,
    0xd7875f,
    0xd78787,
    0xd787af,
    0xd787d7,
    0xd787ff,
    0xd7af00,
    0xd7af5f,
    0xd7af87,
    0xd7afaf,
    0xd7afd7,
    0xd7afff,
    0xd7d700,
    0xd7d75f,
    0xd7d787,
    0xd7d7af,
    0xd7d7d7,
    0xd7d7ff,
    0xd7ff00,
    0xd7ff5f,
    0xd7ff87,
    0xd7ffaf,
    0xd7ffd7,
    0xd7ffff,
    0xff0000,
    0xff005f,
    0xff0087,
    0xff00af,
    0xff00d7,
    0xff00ff,
    0xff5f00,
    0xff5f5f,
    0xff5f87,
    0xff5faf,
    0xff5fd7,
    0xff5fff,
    0xff8700,
    0xff875f,
    0xff8787,
    0xff87af,
    0xff87d7,
    0xff87ff,
    0xffaf00,
    0xffaf5f,
    0xffaf87,
    0xffafaf,
    0xffafd7,
    0xffafff,
    0xffd700,
    0xffd75f,
    0xffd787,
    0xffd7af,
    0xffd7d7,
    0xffd7ff,
    0xffff00,
    0xffff5f,
    0xffff87,
    0xffffaf,
    0xffffd7,
    0xffffff,
    0x080808,
    0x121212,
    0x1c1c1c,
    0x262626,
    0x303030,
    0x3a3a3a,
    0x444444,
    0x4e4e4e,
    0x585858,
    0x626262,
    0x6c6c6c,
    0x767676,
    0x808080,
    0x8a8a8a,
    0x949494,
    0x9e9e9e,
    0xa8a8a8,
    0xb2b2b2,
    0xbcbcbc,
    0xc6c6c6,
    0xd0d0d0,
    0xdadada,
    0xe4e4e4,
    0xeeeeee
]


def hexToTuple(h: int):
    if h > 0xFFFFFF:
        raise ValueError("Input must be a 6-digit hex value.")
    return h & 0xFF0000, h & 0x00FF00, h & 0x0000FF


def sanitizeName(n: str):
    return n.upper().replace(" ", "_")


class Color:
    colorids = set()
    names = set()
    all_colors = []

    def __init__(self, colorid: int, name: str, value: int):
        if colorid in self.colorids:
            raise ValueError(f"Color ID ({colorid}) already in use.")
        else:
            self.colorids.add(colorid)
            self.colorid = colorid

        name = sanitizeName(name)
        if name in self.names:
            raise ValueError(f"Color name ({name}) already in use.")
        else:
            self.names.add(name)
            self.name = name

        if value > 0xFFFFFF:
            raise ValueError("Color value must be a 6-digit hex value.")
        else:
            self.value = value

        self.all_colors.append(self)

    @property
    def rgb(self):
        return hexToTuple(self.value)

    @property
    def prettyName(self):
        realname = self.name
        realnametitlecase = realname.replace("_", " ").title()
        match = re.search(realnametitlecase, r"(.*)(\d.*)")
        if match:
            return match.group(1) + " " + match.group(2).upper()

    def __str__(self):
        return (f"Color ID {self.colorid}: {self.name}, #{hex(self.value)}")

    @classmethod
    def fromID(cls, iden: int):
        for color in cls.colors:
            if color.colorid == iden:
                return color

    @classmethod
    def fromName(cls, name: str):
        for color in cls.colors:
            if color.name == name:
                return color

    def remove(self):
        self.all_colors.remove(self)

    def editValue(self, newvalue):
        if newvalue > 0xFFFFFF:
            raise ValueError("Color value must be a 6-digit hex value.")
        else:
            self.value = newvalue


colordict = {}

for i in range(256):
    colordict[names[i]] = Color(i, names[i], values[i])

colors = AttrDict(colordict)
